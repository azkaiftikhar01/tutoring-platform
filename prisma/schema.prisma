// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  password  String
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

enum Role {
  ADMIN
  USER
}

model Subject {
  id          String        @id @default(cuid())
  name        String
  description String?
  price       Float?
  currency    String? // e.g., "USD", "EUR", "PKR", etc.
  sessionMode SessionMode[]
  location    String?       @default("Chaklala Scheme 3")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  schedules   Schedule[]
  bookings    Booking[]
  teachers    Teacher[]
}

enum SessionMode {
  ONLINE
  IN_HOUSE
  BOTH
}

model Schedule {
  id        String    @id @default(cuid())
  subjectId String
  subject   Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subjectId   String
  subject     Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  scheduleId  String
  schedule    Schedule      @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  sessionType SessionType
  location    String?
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum SessionType {
  ONLINE
  IN_HOUSE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Teacher {
  id          String   @id @default(cuid())
  name        String
  phone       String
  experience  String
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}
